# class create_graph_layout(Graph):
#     def __init__(self, x_axis, y_axis, true_size=True):
#         super().__init__()
#         self.y_axis = x_axis
#         Edge = 1
#         self.x_axis = y_axis
#         self.cells = [0] * y_axis
#         for cell in range(y_axis):
#             self.cells[cell] = [0] * x_axis
#         self.true_size = true_size
#         self.vertices = {}
#         self.load_layout(Edge)
#
#     def load_layout(self, Edge):
#         for i in range(len(self.cells)):
#             row = self.cells[i]
#         for j in range(len(row)):
#             node = Node('x' + str(i) + 'y' + str(j))
#             # here we check the top,bottom, left and right rows and columns
#             if i > 0:
#                 node.parent_node['x' + str(i - 1) + 'y' + str(j)] = Edge
#                 node.child_node['x' + str(i - 1) + 'y' + str(j)] = Edge
#             if i + 1 < self.y_axis:
#                 node.parent_node['x' + str(i + 1) + 'y' + str(j)] = Edge
#                 node.child_node['x' + str(i + 1) + 'y' + str(j)] = Edge
#             if j > 0:
#                 node.parent_node['x' + str(i) + 'y' + str(j - 1)] = Edge
#                 node.child_node['x' + str(i) + 'y' + str(j - 1)] = Edge
#             if j + 1 < self.x_axis:  # not right col
#                 node.parent_node['x' + str(i) + 'y' + str(j + 1)] = Edge
#                 node.child_node['x' + str(i) + 'y' + str(j + 1)] = Edge
#             self.vertices['x' + str(i) + 'y' + str(j)] = node










import pygame
import heapq
from Node import Node
from Graph import Graph


def compute_next_node(graph, node):
    next_node = graph.vertices[node].right
    neighbor = graph.vertices[node].child_node
    cost_of_finding_node = float('inf')
    node_graph_position = None
    if next_node != float('inf'):
        try:
            for i in neighbor:
                current_cost = graph.vertices[i].left + graph.vertices[node].child_node[i]
                if current_cost < cost_of_finding_node:
                    cost_of_finding_node = current_cost
                    node_graph_position = i
            if node_graph_position is None:
                print("Path search exhausted!")
            else:
                return node_graph_position
        except ValueError:
            print("Oops!  That was no valid move...  Path search exhausted.")

    else:
        print('You are stuck')


def robot_sensor(graph, queue, s_current, scan_range, k_m):
    states_to_update = {}
    range_checked = 0
    if scan_range >= 1:
        for neighbor in graph.vertices[s_current].child_node:
            neighbor_coords = [int(neighbor.split('x')[1].split('y')[0]), int(neighbor.split('x')[1].split('y')[1])]
            states_to_update[neighbor] = graph.cells[neighbor_coords[1]
            ][neighbor_coords[0]]
        range_checked = 1

    while range_checked < scan_range:
        new_set = {}
        for state in states_to_update:
            new_set[state] = states_to_update[state]
            for neighbor in graph.vertices[state].child_node:
                if neighbor not in new_set:
                    neighbor_coords = [int(neighbor.split('x')[1].split('y')[0]), int(neighbor.split('x')[1].split('y')[1])]
                    new_set[neighbor] = graph.cells[neighbor_coords[1]
                    ][neighbor_coords[0]]
        range_checked += 1
        states_to_update = new_set

    new_obstacle = False
    for state in states_to_update:
        if states_to_update[state] < 0:
            for neighbor in graph.vertices[state].child_node:
                if(graph.vertices[state].child_node[neighbor] != float('inf')):
                    neighbor_coords = [int(state.split('x')[1].split('y')[0]), int(state.split('x')[1].split('y')[1])]
                    graph.cells[neighbor_coords[1]][neighbor_coords[0]] = -2
                    graph.vertices[neighbor].child_node[state] = float('inf')
                    graph.vertices[state].child_node[neighbor] = float('inf')
                    update_vertex(graph, queue, state, s_current, k_m)
                    new_obstacle = True

    return new_obstacle


# Define D-STAR Lite algorithm
def initDStarLite(graph, queue, s_start, s_goal, k_m):
    graph.vertices[s_goal].right = 0
    heapq.heappush(queue, queue_map(
        graph, s_goal, s_start, k_m) + (s_goal,))
    computeShortestPath(graph, queue, s_start, k_m)

    return (graph, queue, k_m)


def topKey(queue):
    queue.sort()
    if len(queue) > 0:
        return queue[0][:2]
    else:
        return (float('inf'), float('inf'))


def heuristic_from_s(graph, id, s):
    x_distance = abs(int(id.split('x')[1][0]) - int(s.split('x')[1][0]))
    y_distance = abs(int(id.split('y')[1][0]) - int(s.split('y')[1][0]))
    return max(x_distance, y_distance)


def queue_map(graph, id, s_current, k_m):
    return (min(graph.vertices[id].left, graph.vertices[id].right) + heuristic_from_s(graph, id, s_current) + k_m,
            min(graph.vertices[id].left, graph.vertices[id].right))


def update_vertex(graph, queue, id, s_current, k_m):
    s_goal = graph.goal_node
    if id != s_goal:
        min_rhs = float('inf')
        for i in graph.vertices[id].child_node:
            min_rhs = min(
                min_rhs, graph.vertices[i].left + graph.vertices[id].child_node[i])
        graph.vertices[id].right = min_rhs
    id_in_queue = [item for item in queue if id in item]
    if id_in_queue != []:
        if len(id_in_queue) != 1:
            raise ValueError('more than one ' + id + ' in the queue!')
        queue.remove(id_in_queue[0])
    if graph.vertices[id].right != graph.vertices[id].left:
        heapq.heappush(queue, queue_map(graph, id, s_current, k_m) + (id,))


def add_node(vertices, node, neighbors, edge=1):
    new_node = Node(node)
    for nd in neighbors:
        new_node.parent_node[nd] = edge
        new_node.child_node[nd] = edge
    vertices[node] = new_node
    return vertices


def computeShortestPath(graph, queue, s_start, k_m):
    while (graph.vertices[s_start].right != graph.vertices[s_start].left) or (
            topKey(queue) < queue_map(graph, s_start, s_start, k_m)):
        k_old = topKey(queue)
        u = heapq.heappop(queue)[2]
        if k_old < queue_map(graph, u, s_start, k_m):
            heapq.heappush(queue, queue_map(graph, u, s_start, k_m) + (u,))
        elif graph.vertices[u].left > graph.vertices[u].right:
            graph.vertices[u].left = graph.vertices[u].right
            for i in graph.vertices[u].parent_node:
                update_vertex(graph, queue, i, s_start, k_m)
        else:
            graph.vertices[u].left = float('inf')
            update_vertex(graph, queue, u, s_start, k_m)
            for i in graph.vertices[u].parent_node:
                update_vertex(graph, queue, i, s_start, k_m)


# def addNodeToGraph(graph, id, neighbors, edge=1):
#     node = Node(id)
#     for i in neighbors:
#         node.parent_node[i] = edge
#         node.child_node[i] = edge
#     graph[id] = node
#     return graph


def makeGraph():
    # graph = {}
    # graph = add_node(graph, 'x1y1', ['x1y2', 'x2y1'])
    # graph = add_node(graph, 'x2y1', ['x1y1', 'x3y1', 'x2y2'])
    # graph = add_node(graph, 'x1y2', ['x1y1', 'x2y2'])
    # graph = add_node(graph, 'x2y2', ['x1y2', 'x2y1', 'x3y2'])
    # graph = add_node(graph, 'x3y1', ['x3y2', 'x2y1'])
    # graph = add_node(graph, 'x3y2', ['x3y1', 'x2y2'])

    shop_grid = {}
    shop_grid = add_node(shop_grid, 'food-rack', ['wine-rack', 'veg-rack'])
    shop_grid = add_node(shop_grid, 'bath-rack', ['tea-rack', 'food-rack', 'spice-rack', 'international-rack'])
    shop_grid = add_node(shop_grid, 'nuts-rack', ['tea-rack', 'food-rack'])
    shop_grid = add_node(shop_grid, 'spice-rack', ['nuts-rack', 'veg-rack', 'maternal-rack'])
    shop_grid = add_node(shop_grid, 'international-rack', ['ramen-rack', 'nuts-rack'])
    shop_grid = add_node(shop_grid, 'maternal-rack', ['spice-rack', 'food-rack'])
    g = GridWorld(X_DIM, Y_DIM)

    return g


class GridWorld(Graph):
    def __init__(self, x_dim, y_dim, connect8=True):
        super().__init__()
        self.x_dim = x_dim
        self.y_dim = y_dim
        # First make an element for each row (height of grid)
        self.cells = [0] * y_dim
        # Go through each element and replace with row (width of grid)
        for i in range(y_dim):
            self.cells[i] = [0] * x_dim
        self.connect8 = connect8
        self.graph = {}
        self.generateGraphFromGrid()

    def __str__(self):
        msg = 'Graph:'
        for i in self.graph:
            msg += '\n  node: ' + i + ' g: ' + \
                   str(self.graph[i].left) + ' rhs: ' + str(self.graph[i].right) + \
                   ' neighbors: ' + str(self.graph[i].children)
        return msg

    def __repr__(self):
        return self.__str__()

    def printGrid(self):
        print('** GridWorld **')
        for row in self.cells:
            print(row)

    def printGValues(self):
        for j in range(self.y_dim):
            str_msg = ""
            for i in range(self.x_dim):
                node_id = 'x' + str(i) + 'y' + str(j)
                node = self.graph[node_id]
                if node.left == float('inf'):
                    str_msg += ' - '
                else:
                    str_msg += ' ' + str(node.left) + ' '
            print(str_msg)

    def generateGraphFromGrid(self):
        edge = 1
        for i in range(len(self.cells)):
            row = self.cells[i]
            for j in range(len(row)):
                node = Node('x' + str(i) + 'y' + str(j))
                if i > 0:  # not top row
                    node.parent_node['x' + str(i - 1) + 'y' + str(j)] = edge
                    node.child_node['x' + str(i - 1) + 'y' + str(j)] = edge
                if i + 1 < self.y_dim:  # not bottom row
                    node.parent_node['x' + str(i + 1) + 'y' + str(j)] = edge
                    node.child_node['x' + str(i + 1) + 'y' + str(j)] = edge
                if j > 0:  # not left col
                    node.parent_node['x' + str(i) + 'y' + str(j - 1)] = edge
                    node.child_node['x' + str(i) + 'y' + str(j - 1)] = edge
                if j + 1 < self.x_dim:  # not right col
                    node.parent_node['x' + str(i) + 'y' + str(j + 1)] = edge
                    node.child_node['x' + str(i) + 'y' + str(j + 1)] = edge
                self.graph['x' + str(i) + 'y' + str(j)] = node


# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
GRAY1 = (145, 145, 102)
GRAY2 = (77, 77, 51)
BLUE = (0, 0, 80)
DARK_GRAY = (132, 75, 30)

colors = {
    0: DARK_GRAY,
    1: GREEN,
    -1: RED,
    -2: RED
}


# WIDTH and HEIGHT of each grid location
WIDTH = 40
HEIGHT = 40

# Margin between each cell
MARGIN = 5

grid = []
for row in range(10):
    grid.append([])
    for column in range(10):
        grid[row].append(0)

pygame.init()

X_DIM = 12
Y_DIM = 12
VIEWING_RANGE = 2

WINDOW_SIZE = [(WIDTH + MARGIN) * X_DIM + MARGIN, (HEIGHT + MARGIN) * Y_DIM + MARGIN]
screen = pygame.display.set_mode(WINDOW_SIZE)

pygame.display.set_caption("Robotic path-planning")

# Loop until the user clicks the close button
done = False

# Used to manage how fast the screen updates
clock = pygame.time.Clock()

if __name__ == "__main__":

    graph = GridWorld(X_DIM, Y_DIM)
    s_start = 'x0y0'
    s_goal = 'x8y8'
    goal_coords = [int(s_goal.split('x')[1].split('y')[0]), int(s_goal.split('x')[1].split('y')[1])]

    graph.set_start_node(s_start)
    graph.set_goal_node(s_goal)
    k_m = 0
    s_last = s_start
    queue = []

    graph, queue, k_m = initDStarLite(graph, queue, s_start, s_goal, k_m)

    s_current = s_start
    pos_coords = [int(s_current.split('x')[1].split('y')[0]), int(s_current.split('x')[1].split('y')[1])]

    basicfont = pygame.font.SysFont('Comic Sans MS', 36)

    while not done:
        for event in pygame.event.get():  # User did something
            if event.type == pygame.QUIT:  # If user clicked close
                done = True  # Flag that we are done so we exit this loop
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:

                if s_current == graph.goal_node:
                    s_new = 'goal'
                    k_m = k_m
                else:
                    s_last = s_current
                    s_new = compute_next_node(graph, s_current)
                    new_coords = [int(s_new.split('x')[1].split('y')[0]), int(s_new.split('x')[1].split('y')[1])]

                    if (graph.cells[new_coords[1]][new_coords[0]] == -1):
                        s_new = s_current

                    results = robot_sensor(graph, queue, s_new, VIEWING_RANGE, k_m)
                    k_m += heuristic_from_s(graph, s_last, s_new)
                    computeShortestPath(graph, queue, s_current, k_m)

                if s_new == 'goal':
                    print('Goal Reached!')
                    done = True
                else:
                    s_current = s_new
                    pos_coords = [int(s_current.split('x')[1].split('y')[0]), int(s_current.split('x')[1].split('y')[1])]

            elif event.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                column = pos[0] // (WIDTH + MARGIN)
                row = pos[1] // (HEIGHT + MARGIN)
                if(graph.cells[row][column] == 0):
                    graph.cells[row][column] = -1

        # Set the screen background
        screen.fill(BLACK)

        # Draw the grid
        for row in range(Y_DIM):
            for column in range(X_DIM):
                color = WHITE
                pygame.draw.rect(screen, colors[graph.cells[row][column]],
                                 [(MARGIN + WIDTH) * column + MARGIN,
                                  (MARGIN + HEIGHT) * row + MARGIN, WIDTH, HEIGHT])
                node_name = 'x' + str(column) + 'y' + str(row)

                if(graph.vertices[node_name].left != float('inf')):
                    text = basicfont.render(
                        str(graph.vertices[node_name].left), True, (0, 0, 200))
                    # print("text here is ", str(vertices.vertices[node_name].left))
                    textrect = text.get_rect()
                    textrect.centerx = int(
                        column * (WIDTH + MARGIN) + WIDTH / 2) + MARGIN
                    textrect.centery = int(
                        row * (HEIGHT + MARGIN) + HEIGHT / 2) + MARGIN
                    carImg = pygame.image.load('background.jpeg')
                    if (graph.cells[row][column] == -1):
                        carImg = pygame.image.load('background1.png')

                    screen.blit(carImg, textrect)

        # fill in goal_node cell with GREEN
        pygame.draw.rect(screen, GREEN, [(MARGIN + WIDTH) * goal_coords[0] + MARGIN,
                                         (MARGIN + HEIGHT) * goal_coords[1] + MARGIN, WIDTH, HEIGHT])

        # draw moving robot, based on pos_coords
        robot_center = [int(pos_coords[0] * (WIDTH + MARGIN) + WIDTH / 2) +
                        MARGIN, int(pos_coords[1] * (HEIGHT + MARGIN) + HEIGHT / 2) + MARGIN]
        pygame.draw.circle(screen, RED, robot_center, int(WIDTH / 2) - 2)

        # draw robot viewing range
        pygame.draw.rect(
            screen, BLUE, [robot_center[0] - VIEWING_RANGE * (WIDTH + MARGIN),
                           robot_center[1] - VIEWING_RANGE * (HEIGHT + MARGIN),
                           2 * VIEWING_RANGE * (WIDTH + MARGIN),
                           2 * VIEWING_RANGE * (HEIGHT + MARGIN)], 2)

        # Limit to 60 frames per second
        clock.tick(20)

        # Update the screen with what we've drawn.
        pygame.display.flip()

    pygame.quit()


